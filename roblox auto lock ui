-- LocalScript inside StarterPlayerScripts
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Workspace = workspace

-- Settings
local settings = {
    snapRadius = 50,
    highlightEnabled = true,
    autoSnapEnabled = true,
    snapPower = 1
}

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.ResetOnSpawn = false
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

-- Main black frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 250, 0, 250)
mainFrame.Position = UDim2.new(0.5, -125, 0.5, -125)
mainFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
mainFrame.Visible = false
mainFrame.Parent = screenGui

-- Top draggable bar
local topBar = Instance.new("Frame")
topBar.Size = UDim2.new(1, 0, 0, 30)
topBar.Position = UDim2.new(0,0,0,0)
topBar.BackgroundColor3 = Color3.fromRGB(40,40,40)
topBar.Parent = mainFrame

-- Grey visual indicator
local indicator = Instance.new("Frame")
indicator.Size = UDim2.new(0, 100, 0, 5)
indicator.Position = UDim2.new(0.5, -50, 0.5, -2)
indicator.BackgroundColor3 = Color3.fromRGB(120,120,120)
indicator.Parent = topBar

-- Make topBar draggable
do
    local dragging = false
    local dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    topBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    topBar.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            update(input)
        end
    end)
end

-- Open button
local openButton = Instance.new("TextButton")
openButton.Size = UDim2.new(0, 100, 0, 35)
openButton.Position = UDim2.new(0, 20, 0, 20)
openButton.Text = "Settings"
openButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
openButton.TextScaled = true
openButton.Parent = screenGui

openButton.MouseButton1Click:Connect(function()
    mainFrame.Visible = not mainFrame.Visible
end)

-- Close button
local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 50, 0, 25)
closeButton.Position = UDim2.new(1, -55, 0, 2)
closeButton.Text = "X"
closeButton.BackgroundColor3 = Color3.fromRGB(200,0,0)
closeButton.TextScaled = true
closeButton.Parent = topBar

closeButton.MouseButton1Click:Connect(function()
    mainFrame.Visible = false
end)

-- Utility functions
local function createLabel(text, position)
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0, 220, 0, 25)
    label.Position = position
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(1,1,1)
    label.Text = text
    label.TextScaled = true
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = mainFrame
    return label
end

local function createSlider(min, max, default, position, callback)
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Size = UDim2.new(0, 220, 0, 20)
    sliderFrame.Position = position
    sliderFrame.BackgroundColor3 = Color3.fromRGB(50,50,50)
    sliderFrame.Parent = mainFrame

    local fill = Instance.new("Frame")
    fill.Size = UDim2.new((default-min)/(max-min),0,1,0)
    fill.BackgroundColor3 = Color3.fromRGB(0,255,0)
    fill.Parent = sliderFrame

    local dragging = false
    sliderFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
        end
    end)
    sliderFrame.InputEnded:Connect(function(input)
        dragging = false
    end)
    sliderFrame.InputChanged:Connect(function(input)
        if dragging then
            local relativeX = math.clamp(input.Position.X - sliderFrame.AbsolutePosition.X, 0, sliderFrame.AbsoluteSize.X)
            local value = min + (relativeX/sliderFrame.AbsoluteSize.X)*(max-min)
            fill.Size = UDim2.new(relativeX/sliderFrame.AbsoluteSize.X,0,1,0)
            callback(value)
        end
    end)
end

local function createToggle(default, text, position, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 220, 0, 30)
    button.Position = position
    button.Text = text.." : "..tostring(default)
    button.BackgroundColor3 = Color3.fromRGB(80,80,80)
    button.TextScaled = true
    button.Parent = mainFrame

    button.MouseButton1Click:Connect(function()
        default = not default
        button.Text = text.." : "..tostring(default)
        callback(default)
    end)
end

-- Create UI
createLabel("Snap Radius", UDim2.new(0,10,0,40))
createSlider(10,200,settings.snapRadius,UDim2.new(0,10,0,65),function(value) settings.snapRadius = value end)

createLabel("Snap Power",UDim2.new(0,10,0,95))
createSlider(0,1,settings.snapPower,UDim2.new(0,10,0,120),function(value) settings.snapPower = value end)

createToggle(settings.highlightEnabled,"Highlight",UDim2.new(0,10,0,150),function(value) settings.highlightEnabled = value end)
createToggle(settings.autoSnapEnabled,"Auto Snap",UDim2.new(0,10,0,185),function(value) settings.autoSnapEnabled = value end)

-- Highlight all players except local
local highlightAdornments = {}

local function highlightCharacter(character)
    for _, part in ipairs(character:GetChildren()) do
        if part:IsA("BasePart") then
            if not highlightAdornments[part] then
                local adorn = Instance.new("BoxHandleAdornment")
                adorn.Adornee = part
                adorn.Size = part.Size
                adorn.Color3 = Color3.fromRGB(255,0,0)
                adorn.Transparency = 0.6
                adorn.AlwaysOnTop = true
                adorn.ZIndex = 10
                adorn.Parent = part
                highlightAdornments[part] = adorn
            end
        end
    end
end

local function removeHighlight(character)
    for _, part in ipairs(character:GetChildren()) do
        if highlightAdornments[part] then
            highlightAdornments[part]:Destroy()
            highlightAdornments[part] = nil
        end
    end
end

-- Get closest visible target (raycast checks walls)
local function getVisibleTarget()
    local closest
    local closestDist = settings.snapRadius + 1
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local headPos = player.Character.Head.Position
            local dir = headPos - Camera.CFrame.Position
            local ray = Ray.new(Camera.CFrame.Position, dir)
            local hitPart, hitPos = Workspace:FindPartOnRayWithIgnoreList(ray, {LocalPlayer.Character}, false, true)
            if hitPart then
                if hitPart:IsDescendantOf(player.Character) then
                    local dist = dir.Magnitude
                    if dist < closestDist then
                        closestDist = dist
                        closest = player.Character.Head
                    end
                end
            end
        end
    end
    return closest
end

-- Main loop
RunService.RenderStepped:Connect(function()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            if settings.highlightEnabled then
                highlightCharacter(player.Character)
            else
                removeHighlight(player.Character)
            end
        end
    end

    if settings.autoSnapEnabled and settings.snapPower > 0 then
        local target = getVisibleTarget()
        if target then
            local direction = (target.Position - Camera.CFrame.Position)
            Camera.CFrame = Camera.CFrame:Lerp(CFrame.lookAt(Camera.CFrame.Position, Camera.CFrame.Position + direction), settings.snapPower)
        end
    end
end)

