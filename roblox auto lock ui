-- LocalScript inside StarterPlayerScripts
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Default settings
local settings = {
    snapRadius = 50,
    highlightEnabled = true,
    autoSnapEnabled = true,
    snapPower = 1
}

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.ResetOnSpawn = false
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

-- Drag function
local function makeDraggable(frame)
    local dragging = false
    local dragInput, mousePos, framePos

    local function update(input)
        local delta = input.Position - mousePos
        frame.Position = UDim2.new(frame.Position.X.Scale, framePos.X + delta.X, frame.Position.Y.Scale, framePos.Y + delta.Y)
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Open button (always visible)
local openButton = Instance.new("TextButton")
openButton.Size = UDim2.new(0, 100, 0, 30)
openButton.Position = UDim2.new(0, 20, 0, 20)
openButton.Text = "Settings"
openButton.BackgroundColor3 = Color3.fromRGB(100,100,100)
openButton.TextScaled = true
openButton.Parent = screenGui
makeDraggable(openButton)

-- Main settings frame (black)
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 220, 0, 220)
mainFrame.Position = UDim2.new(0, 150, 0, 50)
mainFrame.BackgroundColor3 = Color3.fromRGB(0,0,0)
mainFrame.Visible = false
mainFrame.Parent = screenGui
makeDraggable(mainFrame)

-- Close button
local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 50, 0, 25)
closeButton.Position = UDim2.new(1, -55, 0, 5)
closeButton.Text = "X"
closeButton.TextScaled = true
closeButton.BackgroundColor3 = Color3.fromRGB(200,0,0)
closeButton.Parent = mainFrame

closeButton.MouseButton1Click:Connect(function()
    mainFrame.Visible = false
end)

openButton.MouseButton1Click:Connect(function()
    mainFrame.Visible = not mainFrame.Visible
end)

-- Utility to create labels
local function createLabel(text, position)
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0, 200, 0, 25)
    label.Position = position
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(1,1,1)
    label.Text = text
    label.TextScaled = true
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = mainFrame
    return label
end

-- Slider
local function createSlider(min, max, default, position, callback)
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Size = UDim2.new(0, 200, 0, 20)
    sliderFrame.Position = position
    sliderFrame.BackgroundColor3 = Color3.fromRGB(70,70,70)
    sliderFrame.Parent = mainFrame

    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new((default-min)/(max-min), 0, 1, 0)
    sliderFill.BackgroundColor3 = Color3.fromRGB(0,255,0)
    sliderFill.Parent = sliderFrame

    local dragging = false
    sliderFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    sliderFrame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    sliderFrame.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local relativeX = math.clamp(input.Position.X - sliderFrame.AbsolutePosition.X, 0, sliderFrame.AbsoluteSize.X)
            local value = min + (relativeX / sliderFrame.AbsoluteSize.X) * (max - min)
            sliderFill.Size = UDim2.new(relativeX / sliderFrame.AbsoluteSize.X, 0, 1, 0)
            callback(value)
        end
    end)
end

-- Toggle
local function createToggle(default, text, position, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 200, 0, 25)
    button.Position = position
    button.Text = text .. " : " .. tostring(default)
    button.BackgroundColor3 = Color3.fromRGB(100,100,100)
    button.TextScaled = true
    button.Parent = mainFrame

    button.MouseButton1Click:Connect(function()
        default = not default
        button.Text = text .. " : " .. tostring(default)
        callback(default)
    end)
end

-- Create UI elements
createLabel("Snap Radius", UDim2.new(0,10,0,10))
createSlider(10,200,settings.snapRadius, UDim2.new(0,10,0,35), function(value) settings.snapRadius = value end)

createLabel("Snap Power", UDim2.new(0,10,0,65))
createSlider(0,1,settings.snapPower, UDim2.new(0,10,0,90), function(value) settings.snapPower = value end)

createToggle(settings.highlightEnabled, "Highlight", UDim2.new(0,10,0,125), function(value) settings.highlightEnabled = value end)
createToggle(settings.autoSnapEnabled, "Auto Snap", UDim2.new(0,10,0,155), function(value) settings.autoSnapEnabled = value end)

-- Highlight functions
local function highlightCharacter(character)
    for _, part in ipairs(character:GetChildren()) do
        if part:IsA("BasePart") and not part:FindFirstChild("Highlight") then
            local box = Instance.new("SelectionBox")
            box.Adornee = part
            box.LineThickness = 0.05
            box.Color3 = Color3.new(1, 0, 0)
            box.Parent = part
            box.Name = "Highlight"
        end
    end
end

local function removeHighlight(character)
    for _, part in ipairs(character:GetChildren()) do
        local box = part:FindFirstChild("Highlight")
        if box then
            box:Destroy()
        end
    end
end

-- Get closest target
local function getClosestTarget()
    local closest
    local closestDist = settings.snapRadius + 1
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local dist = (player.Character.Head.Position - Camera.CFrame.Position).Magnitude
            if dist < closestDist then
                closestDist = dist
                closest = player.Character.Head
            end
        end
    end
    return closest
end

-- Main loop
RunService.RenderStepped:Connect(function()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local dist = (player.Character.Head.Position - Camera.CFrame.Position).Magnitude
            if settings.highlightEnabled and dist <= settings.snapRadius then
                highlightCharacter(player.Character)
            else
                removeHighlight(player.Character)
            end
        end
    end

    if settings.autoSnapEnabled and settings.snapPower > 0 then
        local target = getClosestTarget()
        if target then
            local direction = (target.Position - Camera.CFrame.Position)
            Camera.CFrame = Camera.CFrame:Lerp(CFrame.lookAt(Camera.CFrame.Position, Camera.CFrame.Position + direction), settings.snapPower)
        end
    end
end)

